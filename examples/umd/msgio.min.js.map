{"version":3,"file":"msgio.min.js","sources":["../node_modules/nanoevents/index.js","../src/constants.ts","../src/endpoint.ts","../src/utils.ts","../node_modules/nanoid/index.browser.js","../src/socket.ts","../src/iframe.ts","../src/guest.ts"],"sourcesContent":["export let createNanoEvents = () => ({\n  events: {},\n  emit(event, ...args) {\n    let callbacks = this.events[event] || []\n    for (let i = 0, length = callbacks.length; i < length; i++) {\n      callbacks[i](...args)\n    }\n  },\n  on(event, cb) {\n    this.events[event]?.push(cb) || (this.events[event] = [cb])\n    return () => {\n      this.events[event] = this.events[event]?.filter(i => cb !== i)\n    }\n  }\n})\n","/* eslint import/prefer-default-export: 0 */\nexport const MIME_TYPE = 'application/msgio+json';\n","import {createNanoEvents} from 'nanoevents';\nimport {EndpointEvent, EndpointEventType, Receiver} from './types';\nimport type Socket from './socket';\nimport {MIME_TYPE} from './constants';\n\nclass Endpoint {\n    emitter = createNanoEvents();\n\n    origin = window.location.origin;\n\n    socketId = 'none';\n\n    receiver: Receiver;\n\n    constructor(receiver: Receiver) {\n        this.receiver = receiver;\n    }\n\n    sendPacket = (type: EndpointEventType, body: any) => {\n        this.receiver.target.postMessage({\n            mime: MIME_TYPE,\n            type,\n            socket: type === 'CONNECT' ? this.socketId : undefined,\n            body,\n        }, this.receiver.origin);\n    };\n\n    isValidEvent = (e: EndpointEvent) => {\n        const {origin, data: {mime, type, socket}} = e;\n\n        if (origin !== this.receiver.origin) {\n            return false;\n        }\n\n        if (mime !== MIME_TYPE) {\n            return false;\n        }\n\n        if (type !== 'CONNECT' && socket !== this.socketId) {\n            return false;\n        }\n\n        return true;\n    };\n\n    on = (event: 'connect', fn: (socket: Socket) => void) => {\n        this.emitter.on(event, fn);\n    };\n}\n\nexport default Endpoint;\n","import {nanoid} from 'nanoid';\nimport {SocketError, ErrorNameConstructorMap} from './types';\n\nexport const resolveOrigin = (url: string) => {\n    const a = document.createElement('a');\n\n    a.href = url;\n\n    const protocol = a.protocol.length > 4 ? a.protocol : window.location.protocol;\n\n    const host = (() => {\n        if (a.host.length > 0) {\n            return (a.port === '80' || a.port === '443') ? a.hostname : a.host;\n        }\n        return window.location.host;\n    })();\n\n    return a.origin || `${protocol}//${host}`;\n};\n\nexport const generateId = () => `${nanoid()}<msgio>`;\n\nexport const typeOf = (e: MessageEvent) => e.data.type;\n\nexport const bodyOf = (e: MessageEvent) => e.data.body;\n\nexport const encodeError = ({name, message}: Error) => ({name, message});\n\nexport const decodeError = ({name, message}: SocketError) => {\n    const ErrorConstructor: ErrorNameConstructorMap = {\n        Error,\n        EvalError,\n        RangeError,\n        ReferenceError,\n        SyntaxError,\n        TypeError,\n        URIError,\n    };\n\n    if (name in ErrorConstructor) {\n        return new ErrorConstructor[name](message);\n    }\n\n    return new Error('Unknown Error type!<msgio>');\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import {createNanoEvents} from 'nanoevents';\nimport {SocketEvent, SocketEventType, SocketCallResponseEventPayload, SocketCallRegistryValue} from './types';\nimport type Endpoint from './endpoint';\nimport {MIME_TYPE} from './constants';\nimport {generateId, typeOf, bodyOf, encodeError, decodeError} from './utils';\n\nclass Socket {\n    emitter = createNanoEvents();\n\n    id: string;\n\n    connection: Endpoint;\n\n    functionRegistry: Map<string, (...args: any) => any>;\n\n    callRegistry: Map<string, SocketCallRegistryValue>;\n\n    constructor(connection: Endpoint) {\n        this.connection = connection;\n\n        this.id = this.connection.socketId;\n\n        this.functionRegistry = new Map();\n\n        this.callRegistry = new Map();\n\n        window.addEventListener('message', this.onEvent);\n        window.addEventListener('message', this.onCallRequest);\n        window.addEventListener('message', this.onCallResponse);\n    }\n\n    isValidEvent = (e: SocketEvent) => {\n        const {origin, data: {mime, socket}} = e;\n\n        if (origin !== this.connection.receiver.origin) {\n            return false;\n        }\n\n        if (mime !== MIME_TYPE) {\n            return false;\n        }\n\n        if (socket !== this.id) {\n            return false;\n        }\n\n        return true;\n    };\n\n    sendPacket = (type: SocketEventType, body: any) => {\n        const {target, origin} = this.connection.receiver;\n\n        target.postMessage({\n            mime: MIME_TYPE,\n            type,\n            socket: this.id,\n            body,\n        }, origin);\n    };\n\n    onEvent = (e: SocketEvent) => {\n        if (!this.isValidEvent(e)) {\n            return;\n        }\n\n        if (typeOf(e) !== 'SOCKET_EVENT') {\n            return;\n        }\n\n        const {event, payload} = bodyOf(e);\n\n        this.emitter.emit(event, payload);\n    };\n\n    on = (event: string, fn: (...args: any) => void) => {\n        this.emitter.on(event, fn);\n    };\n\n    emit = (event: string, payload: any) => {\n        this.sendPacket('SOCKET_EVENT', {event, payload});\n    };\n\n    func = (fname: string, fn: (...args: any) => void) => {\n        if (typeof fn !== 'function') {\n            throw new Error('The object supplied to \\'function\\' must be a function!<msgio>');\n        }\n\n        this.functionRegistry.set(fname, fn);\n    };\n\n    onCallRequest = (e: SocketEvent) => {\n        if (!this.isValidEvent(e)) {\n            return;\n        }\n\n        if (typeOf(e) !== 'SOCKET_CALL_REQUEST') {\n            return;\n        }\n\n        const {callId, fname, args} = bodyOf(e);\n\n        const send = (payload: SocketCallResponseEventPayload) => {\n            this.sendPacket('SOCKET_CALL_RESPONSE', {callId, fname, payload});\n        };\n\n        const sendError = (result: Error) => send({error: true, result: encodeError(result)});\n\n        const sendResult = (result: unknown) => send({error: false, result});\n\n        if (!this.functionRegistry.has(fname)) {\n            sendError(new ReferenceError(`${fname} is not defined!<msgio>`));\n            return;\n        }\n\n        try {\n            // NOTE: need typescirpt's non-null assertion operator ! below\n            // see Line 186 above and https://github.com/microsoft/TypeScript/issues/41045\n            const result = this.functionRegistry.get(fname)!(...args);\n\n            Promise.resolve(result)\n                .then(sendResult)\n                .catch(sendError);\n        } catch (error) {\n            sendError(error as Error);\n        }\n    };\n\n    onCallResponse = (e: SocketEvent) => {\n        if (!this.isValidEvent(e)) {\n            return;\n        }\n\n        if (typeOf(e) !== 'SOCKET_CALL_RESPONSE') {\n            return;\n        }\n\n        const {callId, payload: {error, result}} = bodyOf(e);\n\n        if (!this.callRegistry.has(callId)) {\n            return;\n        }\n\n        // NOTE: need typescirpt's non-null assertion operator ! below\n        // see Line 186 above and https://github.com/microsoft/TypeScript/issues/41045\n        const {resolve, reject} = this.callRegistry.get(callId)!;\n\n        if (error) {\n            reject(decodeError(result));\n        } else {\n            resolve(result);\n        }\n\n        this.callRegistry.delete(callId);\n    };\n\n    call = (fname: string, ...args: any[]) => {\n        const callId = generateId();\n\n        this.sendPacket('SOCKET_CALL_REQUEST', {callId, fname, args});\n\n        return new Promise((resolve, reject) => {\n            this.callRegistry.set(callId, {callId, fname, args, resolve, reject});\n        });\n    };\n}\n\nexport default Socket;\n","import {EndpointEvent} from './types';\nimport Endpoint from './endpoint';\nimport Socket from './socket';\nimport {resolveOrigin, generateId, typeOf} from './utils';\n\nclass Iframe extends Endpoint {\n    dom: HTMLIFrameElement;\n\n    desiredSocketId = generateId();\n\n    constructor(dom: HTMLIFrameElement) {\n        if (dom.tagName !== 'IFRAME' || !dom.contentWindow) {\n            throw new Error('The DOM Node supplied is not a valid iframe node!<msgio>');\n        }\n\n        super({\n            target: dom.contentWindow,\n            origin: resolveOrigin(dom.src),\n        });\n\n        this.dom = dom;\n\n        window.addEventListener('message', this.onConnect);\n        window.addEventListener('message', this.onResize);\n\n        this.sendPacket('CONNECT', this.desiredSocketId);\n    }\n\n    onConnect = (e: EndpointEvent) => {\n        if (!this.isValidEvent(e)) {\n            return;\n        }\n\n        if (typeOf(e) !== 'CONNECT') {\n            return;\n        }\n\n        const repliedSocketId = e.data.body;\n\n        if (repliedSocketId !== this.desiredSocketId) {\n            return;\n        }\n\n        this.socketId = this.desiredSocketId;\n\n        this.desiredSocketId = 'verified';\n\n        this.emitter.emit('connect', new Socket(this));\n\n        window.removeEventListener('message', this.onConnect);\n    };\n\n    onResize = (e: EndpointEvent) => {\n        if (!this.isValidEvent(e)) {\n            return;\n        }\n\n        if (typeOf(e) !== 'RESIZE') {\n            return;\n        }\n\n        const {width, height} = e.data.body;\n\n        this.dom.width = width;\n        this.dom.height = height;\n    };\n}\n\nexport default Iframe;\n","import {GuestOption, EndpointEvent, FrameSize} from './types';\nimport Endpoint from './endpoint';\nimport Socket from './socket';\nimport {resolveOrigin, typeOf, bodyOf} from './utils';\n\nclass Guest extends Endpoint {\n    option: GuestOption; // only for debug\n\n    constructor(option: GuestOption) {\n        const {host} = option;\n\n        super({\n            target: window.parent,\n            origin: resolveOrigin(host),\n        });\n\n        this.option = option;\n\n        window.addEventListener('message', this.onConnect);\n    }\n\n    onConnect = (e: EndpointEvent) => {\n        if (!this.isValidEvent(e)) {\n            return;\n        }\n\n        if (typeOf(e) !== 'CONNECT') {\n            return;\n        }\n\n        const desiredSocketId = bodyOf(e);\n\n        if (!desiredSocketId) {\n            return;\n        }\n\n        this.socketId = desiredSocketId;\n\n        this.sendPacket('CONNECT', this.socketId);\n\n        this.emitter.emit('connect', new Socket(this));\n\n        window.removeEventListener('message', this.onConnect);\n    };\n\n    resize = (size: FrameSize) => {\n        this.sendPacket('RESIZE', size);\n    };\n}\n\nexport default Guest;\n"],"names":["createNanoEvents","events","emit","event","args","callbacks","this","i","length","on","cb","push","filter","MIME_TYPE","Endpoint","_createClass","receiver","_this","_classCallCheck","_defineProperty","window","location","origin","type","body","target","postMessage","mime","socket","socketId","undefined","e","_e$data","data","fn","emitter","resolveOrigin","url","a","document","createElement","href","protocol","host","port","hostname","concat","generateId","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","nanoid","typeOf","bodyOf","Socket","connection","_this$connection$rece","isValidEvent","_bodyOf","payload","sendPacket","fname","Error","functionRegistry","set","_bodyOf2","callId","send","sendError","result","error","_ref","name","message","has","get","apply","_toConsumableArray","Promise","resolve","then","catch","ReferenceError","_bodyOf3","_bodyOf3$payload","callRegistry","_ref2","ErrorConstructor","reject","EvalError","RangeError","SyntaxError","TypeError","URIError","delete","_len","arguments","Array","_key","Map","addEventListener","onEvent","onCallRequest","onCallResponse","Iframe","_Endpoint","_inherits","_super","_createSuper","dom","tagName","contentWindow","_assertThisInitialized","call","src","desiredSocketId","removeEventListener","onConnect","_e$data$body","width","height","onResize","Guest","option","parent"],"mappings":"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","x_google_ignoreList":[0,4]}